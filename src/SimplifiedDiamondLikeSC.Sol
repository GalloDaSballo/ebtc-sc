// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;


contract SimplifiedDiamondLikeSC {

  // SIMPLIFIED STRUCT
  // We add our settings to the diamond logic to extend it
  struct OurSettings {
    bool allowNonCallback;
    bool callbackEnabledForCall;
  }

  struct DiamondLikeStorage {
    mapping (bytes4 => address) callbackHandler;
    OurSettings settings; // add to these to allow more fiels
  }

  // SIMPLFIIED POS
  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256("diamond.standard.diamond.storage");

  // make owner immutable cause reasons
  address public immutable owner;

  constructor(address _owner) {
    owner = _owner;





    
  }


  // SIMPLIFIED ACCESS
      function getStorage() internal pure returns (DiamondLikeStorage storage ds) {
        bytes32 position = DIAMOND_STORAGE_POSITION;
        assembly {
            ds.slot := position
        }
    }

      function setFallbackHandler(bytes4 sig, address handler) external {
        require(msg.sender == owner);

        // "execute((address,bool,uint128,uint128,bool,uint8,bytes)[])": "94b24d09"
        require(sig != 0x94b24d09);

        DiamondLikeStorage storage s = getStorage();

        s.callbackHandler[sig] = handler;
    }

    function setOnlyCallbackMode(bool allowNonCallbacks) external {
        require(msg.sender == owner);


         DiamondLikeStorage storage s = getStorage();
        s.settings.allowNonCallback = allowNonCallbacks;
    }
}